/*
 * Entity Containment API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package entitycontainment

type ContainmentStatusResponse struct {
	Count int32 `json:"count"`

	Items []ContainmentStatus `json:"items"`
}

// AssertContainmentStatusResponseRequired checks if the required fields are not zero-ed
func AssertContainmentStatusResponseRequired(obj ContainmentStatusResponse) error {
	elements := map[string]interface{}{
		"count": obj.Count,
		"items": obj.Items,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Items {
		if err := AssertContainmentStatusRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseContainmentStatusResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ContainmentStatusResponse (e.g. [][]ContainmentStatusResponse), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseContainmentStatusResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aContainmentStatusResponse, ok := obj.(ContainmentStatusResponse)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertContainmentStatusResponseRequired(aContainmentStatusResponse)
	})
}
