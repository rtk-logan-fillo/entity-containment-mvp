/*
 * Entity Containment API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package entitycontainment

// ContainmentStatus - The containment status of the requested device
type ContainmentStatus struct {
	DeviceId string `json:"device_id"`

	Status string `json:"status"`
}

// AssertContainmentStatusRequired checks if the required fields are not zero-ed
func AssertContainmentStatusRequired(obj ContainmentStatus) error {
	elements := map[string]interface{}{
		"device_id": obj.DeviceId,
		"status":    obj.Status,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseContainmentStatusRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ContainmentStatus (e.g. [][]ContainmentStatus), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseContainmentStatusRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aContainmentStatus, ok := obj.(ContainmentStatus)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertContainmentStatusRequired(aContainmentStatus)
	})
}
