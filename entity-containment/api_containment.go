/*
 * Entity Containment API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package entitycontainment

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ContainmentApiController binds http requests to an api service and writes the service results to the http response
type ContainmentApiController struct {
	service      ContainmentApiServicer
	errorHandler ErrorHandler
}

// ContainmentApiOption for how the controller is set up.
type ContainmentApiOption func(*ContainmentApiController)

// WithContainmentApiErrorHandler inject ErrorHandler into controller
func WithContainmentApiErrorHandler(h ErrorHandler) ContainmentApiOption {
	return func(c *ContainmentApiController) {
		c.errorHandler = h
	}
}

// NewContainmentApiController creates a default api controller
func NewContainmentApiController(s ContainmentApiServicer, opts ...ContainmentApiOption) Router {
	controller := &ContainmentApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ContainmentApiController
func (c *ContainmentApiController) Routes() Routes {
	return Routes{
		{
			"BulkLookupContainmentStatus",
			strings.ToUpper("Post"),
			"/containment/v1/organizations/{organization_id}/devices/{vendor}/containment-status",
			c.BulkLookupContainmentStatus,
		},
		{
			"HealthCheck",
			strings.ToUpper("Get"),
			"/",
			c.HealthCheck,
		},
		{
			"LookupIsContainmentActive",
			strings.ToUpper("Get"),
			"/containment/v1/organizations/{organization_id}/{vendor}/containment-active",
			c.LookupIsContainmentActive,
		},
		{
			"RequestContainment",
			strings.ToUpper("Put"),
			"/containment/v1/organizations/{organization_id}/devices/{vendor}/{device_id}/contain",
			c.RequestContainment,
		},
		{
			"RequestLiftContainment",
			strings.ToUpper("Put"),
			"/containment/v1/organizations/{organization_id}/devices/{vendor}/{device_id}/lift-containment",
			c.RequestLiftContainment,
		},
	}
}

// BulkLookupContainmentStatus -
func (c *ContainmentApiController) BulkLookupContainmentStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationIdParam := params["organization_id"]

	vendorParam := params["vendor"]

	deviceIdListParam := DeviceIdList{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deviceIdListParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeviceIdListRequired(deviceIdListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BulkLookupContainmentStatus(r.Context(), organizationIdParam, vendorParam, deviceIdListParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// HealthCheck - Health check
func (c *ContainmentApiController) HealthCheck(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HealthCheck(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// LookupIsContainmentActive -
func (c *ContainmentApiController) LookupIsContainmentActive(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationIdParam := params["organization_id"]

	vendorParam := params["vendor"]

	result, err := c.service.LookupIsContainmentActive(r.Context(), organizationIdParam, vendorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RequestContainment -
func (c *ContainmentApiController) RequestContainment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationIdParam := params["organization_id"]

	vendorParam := params["vendor"]

	deviceIdParam := params["device_id"]

	result, err := c.service.RequestContainment(r.Context(), organizationIdParam, vendorParam, deviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RequestLiftContainment -
func (c *ContainmentApiController) RequestLiftContainment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationIdParam := params["organization_id"]

	vendorParam := params["vendor"]

	deviceIdParam := params["device_id"]

	result, err := c.service.RequestLiftContainment(r.Context(), organizationIdParam, vendorParam, deviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
